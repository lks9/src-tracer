#!/bin/sh

# this is "${SRC_TRACER_DIR}/cc_wrapper/cc1"

#    usage (production mode):
# export SRC_TRACER_DIR=.........
# export SRC_TRACER_STORE_DIR=...
# export CC="gcc"
# export CFLAGS="-Wno-error -L${SRC_TRACER_DIR}/instrumentation -no-integrated-cpp -B${SRC_TRACER_DIR}/cc_wrapper"
#    (you might also add "-O3" and "-save-temps" to CFLAGS)
# export LIBS="-lsrc_tracer"
# export SRC_TRACER=
#    and then you can ./configure your project...
#    before the actual compilation:
# export SRC_TRACER="-D_TRACE_MODE"
#    then you can run make, gcc, whatever

#    usage (retrace mode):
#    Don't change the variables except $SRC_TRACER.
#    If you reconfigure, use the same configuration as in trace mode!
#    Before the actual compilation:
# export SRC_TRACER="-D_RETRACE_MODE"
#    then you can run make, gcc, whatever

#    usage (combined mode)
# export SRC_TRACER="-D_TRACE_MODE -D_RETRACE_MODE"
#    This way, the compiled binaries can be used for both recording and replaying.
#    The code is expected to be slower, therefore not for production mode.
#    You might want to compile it with debugging info "gcc -g".

#    usage (text trace mode)
# export SRC_TRACER="-D_TEXT_TRACE_MODE"
#    The code is expected to be slower, therefore not for production mode.

echo_outfile () {
    while [ ! -z "$1" ]; do
        case "$1" in
            -o)
                shift
                echo "$1"
                ;;
            *)
                ;;
        esac
        shift
    done
}

echo_infile () {
    while [ ! -z "$1" ]; do
        case "$1" in
            *.c)
                echo "$1"
                ;;
            *)
                ;;
        esac
        shift
    done
}

if [ -z "${SRC_TRACER}" ]; then
    # just compile it
    exec $(${COLLECT_GCC} --print-prog-name=cc1) $@
fi

if [ -z "${SRC_TRACER_STORE_DIR}" ]; then
    # store the traces and the function database here
    mkdir -p $HOME/.src_tracer/
    export SRC_TRACER_STORE_DIR=$HOME/.src_tracer/
fi

if [ "$1" = "-E" ]; then
    outfile=$( echo_outfile $@ )
    infile=$( echo_infile $@ )

    # annotate if needed
    if [ -z "${infile}" ]; then
        # echo "no file to annotate"
        # just call gcc (or the preprocessor)
        exec $(${COLLECT_GCC} --print-prog-name=cc1) $@
    elif [ $(grep -c "src_tracer" "${infile}") -gt 0 ]; then
        # echo "skipping ${infile} (already annotated)"
        # just call gcc (or the preprocessor)
        exec $(${COLLECT_GCC} --print-prog-name=cc1) $@
    else
        # call gcc (or the preprocessor)
        $(${COLLECT_GCC} --print-prog-name=cc1) $@

        # save the pre-pocessed output
        cp "${outfile}" "${outfile}.tmp.c"

        # do the instrumentation
        python3 "${SRC_TRACER_DIR}/instrumenter.py" "${outfile}.tmp.c" "${SRC_TRACER_STORE_DIR}" || exit $?

        # rerun preprocessor to resolve instrumentation macros
        cpp ${SRC_TRACER} "${outfile}.tmp.c" -o "${outfile}.tmp.i" -I "${SRC_TRACER_DIR}/instrumentation/"
        cp "${outfile}.tmp.i" "${outfile}"
    fi
elif [ "$1" = "-fpreprocessed" ]; then
    # just compile it
    exec $(${COLLECT_GCC} --print-prog-name=cc1) $@
fi
