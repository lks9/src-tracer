#!/bin/sh

# this is "${SRC_TRACER_DIR}/cc_wrapper/cc1"

#    usage (production mode):
# export SRC_TRACER_DIR=.........
# export CC="gcc"
# export CFLAGS="-Wno-error -O3 -L${SRC_TRACER_DIR}/instrumentation -no-integrated-cpp -B${SRC_TRACER_DIR}/cc_wrapper"
#    (you might also add "-save-temps" to CFLAGS)
# export LIBS="-lsrc_tracer"
# export SRC_TRACER_INSTRUMENT=
#    and then you can ./configure your project...
#    before the actual compilation:
# export SRC_TRACER_INSTRUMENT=_TRACE_MODE
#    then you can run make, gcc, whatever

#    usage (retrace mode):
#    don't change the variables
#    if you reconfigure, use the same configuration as in trace mode
#    before the actual compilation:
# export SRC_TRACER_INSTRUMENT=_RETRACE_MODE
#    then you can run make, gcc, whatever
#
#    Note that the instrumented code will be compiled
#    in retrace mode with -O0 regardless of CFLAGS.
#    However, the optimization in the CFLAGS might
#    affect the pre-processing (so we could have -O3 i
#    pre-processing and -O0 for compilation).


echo_outfile () {
    while [ ! -z "$1" ]; do
        case "$1" in
            -o)
                shift
                echo "$1"
                ;;
            *)
                ;;
        esac
        shift
    done
}

echo_infile () {
    while [ ! -z "$1" ]; do
        case "$1" in
            *.c)
                echo "$1"
                ;;
            *)
                ;;
        esac
        shift
    done
}

if [ ! ${SRC_TRACER_INSTRUMENT} ]; then
    # just compile it
    exec $(${COLLECT_GCC} --print-prog-name=cc1) $@
fi

if [ "$1" = "-E" ]; then
    outfile=$( echo_outfile $@ )
    infile=$( echo_infile $@ )

    # annotate if needed
    if [ $(grep -c "src_tracer" "${infile}") -gt 0 ]; then
        # echo "skipping ${infile} (already annotated)"
        # just call gcc (or the preprocessor)
        exec $(${COLLECT_GCC} --print-prog-name=cc1) $@
    else
        # call gcc (or the preprocessor)
        $(${COLLECT_GCC} --print-prog-name=cc1) $@

        # do the instrumentation
        python3 "${SRC_TRACER_DIR}/instrumenter.py" "${outfile}"

        # save the instrumentation output
        cp "${outfile}" "${outfile}.tmp.c"
        # echo "${outfile}.tmp.c"

        # rerun preprocessor to resolve instrumentation macros
        cpp -D${SRC_TRACER_INSTRUMENT} "${outfile}" -o "${outfile}.tmp.i" -I "${SRC_TRACER_DIR}/instrumentation/"
        mv "${outfile}.tmp.i" "${outfile}"
    fi
elif [ "$1" = "-fpreprocessed" ]; then
    # just compile it
    exec $(${COLLECT_GCC} --print-prog-name=cc1) $@
fi
